#!/usr/bin/env bash
source "$BDIR/sources/essentials.sh"
source "$BDIR/sources/strict.bash"

# -------------------------------------
# AdGuard Home

function aghome_install {
	if command-exists AdGuardHome; then
		echo 'AdGuard Home is already installed'
	else
		echo 'Installing AdGuard Home...'
		down-zip-file "https://github.com/AdguardTeam/AdGuardHome/releases/download/v0.101.0/AdGuardHome_MacOS.zip" "AdGuardHome" "$HOME/bin/AdGuardHome"
		chmod +x "$HOME/bin/AdGuardHome"
		echo 'Installed AdGuard Home'
	fi
}

function aghome_uninstall {
	echo 'Uninstalling AdGuard Home...'
	if command-exists AdGuardHome; then
		ok sudo AdGuardHome -s uninstall
		ok rm -vi "$HOME/bin/AdGuardHome" #*
		echo 'Uninstalled AdGuard Home'
	else
		echo 'AdGuard Home is already uninstalled'
	fi
}

function aghome_service {
	echo 'Configuring AdGuard Home...'
	ok sudo AdGuardHome -s uninstall
	sudo AdGuardHome -s install
	confirm "Press any key once you have completed the AdGuard Home setup..."
	echo 'Configured AdGuard Home'
}

function aghome_setup {
	echo 'Setting up AdGuard Home...'
	aghome_install && aghome_service
	echo 'AdGuard home is now set up'
}

# -------------------------------------
# Cloudflared
# https://developers.cloudflare.com/1.1.1.1/dns-over-https/cloudflared-proxy/
# https://developers.cloudflare.com/argo-tunnel/downloads/

function cloudflared_install {
	if command-exists cloudflared; then
		echo 'Cloudflared is already installed'
	else
		echo 'Installing Cloudflared...'
		if is-mac; then
			brew install cloudflare/cloudflare/cloudflared
			echo 'Installed Cloudflared'
		else
			stderr echo 'Installation of Cloudflared not yet added for non-macos platforms'
			return 1
		fi
	fi
}

function cloudflared_uninstall {
	echo 'Uninstalling Cloudflared...'
	if command-exists cloudflared; then
		if is-mac; then
			ok sudo launchctl stop com.cloudflare.cloudflared
			ok sudo launchctl remove com.cloudflare.cloudflared
			ok sudo cloudflared service uninstall
			ok brew uninstall cloudflare/cloudflare/cloudflared
		echo 'Uninstalled Cloudflared'
		else
			stderr echo 'Uninstalling Cloudflared is not yet added for non-macos platforms'
			return 1
		fi
	else
		echo 'Cloudflared is already uninstalled'
	fi
}

function cloudflared_service {
	if is-file "/usr/local/etc/cloudflared/config.yml"; then
		echo 'Cloudflared is already configured'
	else
		echo 'Configuring Cloudflared as service...'
		mkdir -p /usr/local/etc/cloudflared
		cat << EOF > /usr/local/etc/cloudflared/config.yml
proxy-dns: true
proxy-dns-upstream:
  - https://1.1.1.1/dns-query
  - https://1.0.0.1/dns-query

EOF
		sudo cloudflared service install
		sudo launchctl start com.cloudflare.cloudflared
		echo 'Configured Cloudflared'
	fi
}

function cloudflared_setup {
	echo 'Setting up Cloudflared...'
	cloudflared_install && cloudflared_service
	echo 'Cloudflared is now set up'
}

# -------------------------------------
# DNSCrypt Proxy

function dnscrypt_install {
	if command-exists dnscrypt-proxy; then
		echo 'DNSCrypt-Proxy is already installed'
	else
		echo 'Installing DNSCrypt-Proxy...'
		if is-mac; then
			brew install dnscrypt-proxy
			echo 'Installed DNSCrypt-Proxy'
		else
			stderr echo 'Installation of DNSCrypt-Proxy not yet added for non-macos platforms'
			return 1
		fi
	fi
}

function dnscrypt_uninstall {
	echo 'Uninstalling DNSCrypt-Proxy...'
	if command-exists dnscrypt-proxy; then
		if is-mac; then
			ok sudo rm -vi /usr/local/etc/dnscrypt-proxy.toml
			sudo brew services stop dnscrypt-proxy
			ok brew uninstall dnscrypt-proxy
			echo 'Uninstalled DNSCrypt-Proxy'
		else
			stderr echo 'Uninstalling DNSCrypt-Proxy is not yet added for non-macos platforms'
			return 1
		fi
	else
		echo 'DNSCrypt-Proxy is already uninstalled'
	fi
}

function dnscrypt_service {
	echo 'Configuring DNSCrypt-Proxy as service...'
	if is-missing "/usr/local/etc/dnscrypt-proxy.toml"; then
		down "https://gist.githubusercontent.com/balupton/48057270a67d70e2ac984fdfa475ad29/raw/dnscrypt-proxy.toml" "/usr/local/etc/dnscrypt-proxy.toml"
	fi
	sudo brew services start dnscrypt-proxy
	echo 'Configured DNSCrypt-Proxy'
}

function dnscrypt_setup {
	echo 'Setting up DNSCrypt-Proxy...'
	dnscrypt_install && dnscrypt_service
	echo 'DNSCrypt-Proxy is now setup up'
}


# -------------------------------------
# Setup

function dns_uninstall {
	aghome_uninstall
	dnscrypt_uninstall
	cloudflared_uninstall
	select-dns
}

function dns_configured {
	out="$(dig -x google.com)"
	if echo "$out" | grep ";; SERVER: 127.0.0.1#53(127.0.0.1)"; then
		echo 'DNS is configured and running correctly'
	else
		echo 'DNS did not appear to be setup correctly'
		return 1
	fi
}

function dns_setup {
	services=(
		adguard-home
		cloudflared
		dnscrypt
		system
	)
	service=""
	if is-string "${1:-}"; then
		service="$1"
	elif is-string "${DNS_SERVICE:-}"; then
		service="$DNS_SERVICE"
	else
		service="${1:-"$(choose "${services[@]}")"}"
	fi

	dns_uninstall
	if test "$service" = "cloudflared"; then
		cloudflared_setup
	elif test "$service" = "dnscrypt"; then
		dnscrypt_setup
	elif test "$service" = "system"; then
		echo 'using the builtin system DNS service'
	elif test "$service" = "adguard-home" -o "$service" = "adguard"; then
		aghome_setup
	else
		stderr echo "ERROR: setup-dns requires the DNS_SERVICE environment variable to be set, or requires a service to be specified, available services are: ${services[*]}"
		exit 1
	fi
}

if test "${1:-}" = "uninstall"; then
	dns_uninstall
elif (test -z "${1:-}" && dns_configured) || (dns_setup "${1:-}" && select-dns local && dns_configured); then
	echo 'DNS setup complete'
else
	select-dns
	echo 'DNS setup FAILED'
fi
