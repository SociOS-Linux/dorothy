#!/usr/bin/env bash

export OP_SESSION
export OP_SUBDOMAIN
database="$HOME/.scripts/env/secrets.json"

function secret_resolve {
	key="$1"
	result="$(secret_read "$key" || echo -n '')"
	if test -n "$result"; then
		echo -n "$result"
	elif test -z "$result"; then
		if ! sudo test -f "$database"; then
			stderr echo -en "ERROR: secret requires [$database] to exist, in the format of:\\n{\\n  \"SECRET\": [\"vault\", \"item\", \"field\"]\\n}"
			exit 1
		fi
		vault="$(sudo jq -r ".${key}[0]" "$database")"
		item="$(sudo jq -r ".${key}[1]" "$database")"
		field="$(sudo jq -r ".${key}[2]" "$database")"
		if test -n "$vault" && test -n "$item" && test -n "$field"; then
			value="$(secret_fetch "$vault" "$item" "$field")"
		else
			stderr echo "ERROR: [$database] had an entry that did not have all three parts: [$vault] [$item] [$field]"
			exit 1
		fi
		secret_write "$key" "$value"
		echo -n "$value"
	else
		echo "ERROR: could not fetch the secret: $key"
		exit 1
	fi
}

function secret_write {
	key="$1"
	value="$2"
	mkdir -p "$HOME/.scripts/env/secrets"
	secret_delete "$key"
	if test -n "$value"; then
		echo -n "$value" > "$HOME/.scripts/env/secrets/$key"
		sudo chown root: "$HOME/.scripts/env/secrets/$key"
		sudo chmod 600 "$HOME/.scripts/env/secrets/$key"
	else
		exit 1
	fi
}

function secret_clear {
	sudo rm -Rf "$HOME/.scripts/env/secrets/"
}

function secret_exists {
	key="$1"
	sudo test -f "$HOME/.scripts/env/secrets/$key"
}

function secret_delete {
	key="$1"
	sudo rm -f "$HOME/.scripts/env/secrets/$key"
}

function secret_read {
	key="$1"
	if secret_exists "$1"; then
		value="$(sudo cat "$HOME/.scripts/env/secrets/$key" | tr -d '\n')"
		if test -n "$value"; then
			echo -n "$value"
		else
			secret_delete "$key"
			exit 1
		fi
	else
		exit 1
	fi
}

function secret_signout {
	if test -z "$OP_SESSION"; then
		if secret_exists "OP_SESSION"; then
			OP_SESSION="$(secret_read OP_SESSION)"
			op signout --session="$OP_SESSION"
		fi
	else
		op signout --session="$OP_SESSION"
	fi
	secret_delete "OP_SESSION"
	secret_delete "OP_SUBDOMAIN"
}

function secret_signin {
	if test -z "$OP_SESSION"; then
		OP_SESSION="$(secret_read OP_SESSION || echo -n '')"
		if test -z "$OP_SESSION"; then
			if test -z "$OP_SUBDOMAIN"; then
				OP_SUBDOMAIN="$(secret_read OP_SUBDOMAIN || echo -n '')"
				if test -z "$OP_SUBDOMAIN"; then
					OP_SUBDOMAIN="$(ask 'What is your 1password subdomain?')"
					secret_write "OP_SUBDOMAIN" "$OP_SUBDOMAIN"
				fi
			fi

			OP_SESSION="$(op signin "$OP_SUBDOMAIN" --output=raw)"
			secret_write "OP_SESSION" "$OP_SESSION"
		fi
	fi
}

function secret_grab {
	secret_signin
	if result="$(op get item "$2" --vault="$1" --session="$OP_SESSION" 2>&1)"; then
		echo -n "$result"
	elif [[ "$result" = *'You are not currently signed in'* ]]; then
		stderr echo 'ERROR: Session expired. Run: secret signin'
		exit 1
	else
		stderr echo "$result"
		exit 1
	fi
}

function secret_fetch {
	if test "$field" = "username"; then
		secret_grab "$vault" "$item" | jq -r ".details.fields[] | select(.designation==\"username\").value"
	elif test "$field" = "password"; then
		secret_grab "$vault" "$item" | jq -r ".details.fields[] | select(.designation==\"password\").value"
	elif test -n "$field"; then
		secret_grab "$vault" "$item" | jq -r ".details.sections[] | select(.fields).fields[] | select(.t==\"$field\").v"
	fi
}

function secret_env {
	before=()
	after=()
	found='no'

	for arg in "$@"; do
		if test "$arg" = '--'; then
			found='yes'
			continue
		fi
		if test "$found" = 'yes'; then
			after+=("$arg")
		else
			before+=("$arg")
		fi
	done

	if test "$found" = 'yes'; then
		vars=("${before[@]}")
		args=("${after[@]}")
	else
		stderr echo 'ERROR: -- was not found'
		stderr echo 'USAGE: secret env <secret...> -- <command> [command_args...]'
		exit 1
		# vars=()
		# args=("${before[@]}")
	fi

	secrets=()
	if test "${#vars[@]}" -ne '0'; then
		for var in "${vars[@]}"; do
			secrets+=("$var=$(secret get "$var")")
		done
	fi

	env "${secrets[@]}" "${args[@]}"
}

if test "$1" = "env"; then
	secret_env "${@:2}"
elif test "$1" = "clear"; then
	secret_clear
elif test "$1" = "signin"; then
	secret_signout
	secret_signin
elif test "$1" = "signout"; then
	secret_signout
elif test "$1" = "delete"; then
	if test -n "$2"; then
		secret_delete "$2"
	else
		stderr echo 'USAGE: secret delete <name>'
		exit 1
	fi
elif test "$1" = "get"; then
	if test -n "$2"; then
		secret_resolve "$2"
	else
		stderr echo 'USAGE: secret get <name>'
		exit 1
	fi
else
	stderr echo 'USAGE:'
	stderr echo 'secret clear'
	stderr echo 'secret signin'
	stderr echo 'secret signout'
	stderr echo 'secret get <name>'
	stderr echo 'secret delete <name>'
	stderr echo 'secret env <secret...> -- <command> [command_args...]'
	exit 1
fi