#!/usr/bin/env bash
source "$BDIR/sources/essentials.sh"
source "$BDIR/sources/strict.bash"

# Prepare
ipv4servers=()
ipv6servers=()
servers=()
function fetch_servers {
	# select provider
	providers=(
		adguard
		adguard-family
		cloudflare
		cloudflare-malware
		cloudflare-family
		google
		opendns
		quad9
		local
		env
	)
	provider=""
	if is-string "${1:-}"; then
		provider="$1"
	elif is-string "${DNS_PROVIDER:-}"; then
		provider="$DNS_PROVIDER"
	else
		provider="${1:-"$(choose "${providers[@]}")"}"
	fi

	# turn provider into servers
	if test "$provider" = "adguard"; then
		ipv4servers=(
			"176.103.130.130"
			"176.103.130.131"
		)
		ipv6servers=(
			"2a00:5a60::ad1:0ff"
			"2a00:5a60::ad2:0ff"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "adguard-family"; then
		# https://adguard.com/en/adguard-dns/overview.html
		# https://family.cloudflare-dns.com/dns-query
		ipv4servers=(
			"176.103.130.132"
			"176.103.130.134"
		)
		ipv6servers=(
			"2a00:5a60::bad1:0ff"
			"2a00:5a60::bad2:0ff"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "cloudflare" -o "$provider" = "cf"; then
		# https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1
		ipv4servers=(
			"1.1.1.1"
			"1.0.0.1"
		)
		ipv6servers=(
			"2606:4700:4700::1111"
			"2606:4700:4700::1001"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "cloudflare-malware" -o "$provider" = "cf-malware"; then
		# https://developers.cloudflare.com/1.1.1.1/1.1.1.1-for-families/setup-instructions/router/
		ipv4servers=(
			"1.1.1.2"
			"1.0.0.2"
		)
		ipv6servers=(
			"2606:4700:4700::1112"
			"2606:4700:4700::1002"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "cloudflare-family" -o "$provider" = "cf-family"; then
		# https://developers.cloudflare.com/1.1.1.1/1.1.1.1-for-families/setup-instructions/router/
		ipv4servers=(
			"1.1.1.3"
			"1.0.0.3"
		)
		ipv6servers=(
			"2606:4700:4700::1113"
			"2606:4700:4700::1003"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "google"; then
		ipv4servers=(
			"8.8.8.8"
			"8.8.4.4"
		)
		ipv6servers=(
			"2001:4860:4860::8888"
			"2001:4860:4860::8844"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "opendns"; then
		# https://support.opendns.com/hc/en-us/articles/227986667-Does-OpenDNS-support-IPv6-
		ipv4servers=(
			"208.67.222.222"
			"208.67.220.220"
		)
		ipv6servers=(
			"2620:0:ccc::2"
			"2620:0:ccd::2"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "quad9"; then
		ipv4servers=(
			"9.9.9.9"
			"149.112.112.112"
		)
		ipv6servers=(
			"2620:fe::fe"
			"2620:fe::9"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "local"; then
		ipv4servers=(
			"127.0.0.1"
		)
		ipv6servers=(
			"::1"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "env"; then
		if is-present "${DNS_IPV4SERVERS:-}" && is-present "${DNS_IPV6SERVERS:-}"; then
			ipv4servers=("${DNS_IPV4SERVERS[@]}")
			ipv6servers=("${DNS_IPV6SERVERS[@]}")
			servers=(
				"${ipv4servers[@]}"
				"${ipv6servers[@]}"
			)
		elif is-present "${DNS_SERVERS:-}"; then
			servers=("${DNS_SERVERS[@]}")
		else
			stderr echo "ERROR: select-dns: env provider requires the DNS_SERVERS environment variable to be set to an array of DNS servers to use"
			return 1
		fi
	else
		stderr echo "ERROR: select-dns requires the DNS_PROVIDER environment variable to be set, or requires a provider to be specified, available providers are: ${providers[*]}"
		return 1
	fi
}

# https://support.apple.com/en-us/HT202516
if is-mac; then
	if command-exists networksetup; then
		fetch_servers "$@"
		echo "configuring dns to ${servers[*]}"
 		# dns="$(networksetup -getdnsservers Wi-Fi | tr '\n' ' ')"
		# ^ doesn't work in mojave: There aren't any DNS Servers set on Wi-Fi.
		networksetup -listallnetworkservices | grep -v '\*' | while read -r interface; do
			echo "networksetup: $interface"
			# shellcheck disable=SC2086
			sudo networksetup -setdnsservers "$interface" "${servers[@]}"
		done
	else
		stderr echo "Cannot figure out how to set DNS on this MacOS version"
		exit 1
	fi
# this is probably worth a try:
# https://dedunu.info/2020/05/24/ubuntu-20-04-server-change-dns-and-domain
# https://ubuntu.com/server/docs/network-configuration
# https://unix.stackexchange.com/a/442599/50703
# the below I could not get to work
# elif is-apt; then
# 	if command-missing nmcli; then
# 		sudo apt install -y network-manager
# 	fi
# 	# could read `nmcli device show` to find out which interfaces are available
# 	echo "selecting DNS via nmcli"
# 	nmcli connection modify eth0 ipv4.dns "${ipv4servers[@]}"
# 	nmcli connection modify eth0 ipv6.dns "${ipv6servers[@]}"
else
	stderr echo "DNS selection not yet implemented for this operating system"
	exit 1
fi