#!/usr/bin/env bash
source "$HOME/.scripts/sources/essentials.sh"
set -e

# Prepare
if ! is_dir ~/.ssh; then
	mkdir ~/.ssh
fi
if ! is_file ~/.ssh/config; then
	touch ~/.ssh/config
fi

# General
git config --global core.excludesfile ~/.gitignore_global
git config --global push.default simple
git config --global mergetool.keepBackup false
git config --global color.ui auto

# Profile
if test -z "$(git config --global user.name)"; then
	read -r -p "What is your name? " name
	git config --global user.name "$name"
fi
if test -z "$(git config --global user.email)"; then
	read -r -p "What is your email? " email
	git config --global user.email "$email"
fi
if test -z "$(git config --global github.user)"; then
	read -r -p "What is your GitHub username? " github
	git config --global github.user "$github"
fi

# Editor
echo "Git Configuration: Editor"
if is_string "$TERMINAL_EDITOR_PROMPT"; then
	git config --global core.editor "$TERMINAL_EDITOR_PROMPT"
elif is_string "$TERMINAL_EDITOR"; then
	git config --global core.editor "$TERMINAL_EDITOR"
elif is_string "$EDITOR"; then
	git config --global core.editor "$EDITOR"
fi

# Merge tool
if command_exists meld; then
	echo "Git Configuration: Meld"
	git config --global diff.tool meld
	git config --global merge.tool meld
elif is_mac; then
	echo "Git Configuration: OpenDiff"
	git config --global diff.tool opendiff
	git config --global merge.tool opendiff
fi

# Authentication
# Use MacOS Credential Helper if available, otherwise default to time cache
if is_mac; then
	echo "Git Configuration: MacOS"
	git config --global credential.helper osxkeychain
	git config --global difftool.prompt false
	# http://apple.stackexchange.com/a/254619/15131
	if ! silent grep 'AddKeysToAgent yes' < ~/.ssh/config; then
		echo "Git Configuration: AddKeysToAgent"
		printf '\nAddKeysToAgent yes' >> ~/.ssh/config
	fi
else
	echo "Git Configuration: Linux"
	git config --global credential.helper cache
	git config credential.helper 'cache --timeout=86400'
fi

# Protocol
# https://hub.github.com/hub.1.html
# https://stackoverflow.com/a/22027731/130638
if test -z "$GIT_PROTOCOL" -a -n "$HUB_PROTCOL"; then
	GIT_PROTOCOL="$HUB_PROTOCOL"
fi
if test -z "$GIT_PROTOCOL"; then
	echo -e "\\nGit Protocol Selection"
	GIT_PROTOCOL="$(choose ssh https manual)"
fi
if test "$GIT_PROTOCOL" = "ssh"; then
	echo "Git Protocol: SSH"
	git config --global hub.protocol ssh
	git config --global url.ssh://git@github.com/.insteadOf https://github.com/
	git config --global url.ssh://git@gitlab.com/.insteadOf https://gitlab.com/
	git config --global url.ssh://git@bitbucket.org/.insteadOf https://bitbucket.org/
else
	# || false to not care about failures if the the key didn't exist
	ok git config --global --unset url.ssh://git@github.com/.insteadof
	ok git config --global --unset url.ssh://git@gitlab.com/.insteadof
	ok git config --global --unset url.ssh://git@bitbucket.org/.insteadof
	if test "$GIT_PROTOCOL" = "https"; then
		echo "Git Protocol: HTTPS"
		git config --global hub.protocol https
	else
		echo "Git Protocol: Manual"
		ok git config --global --unset hub.protocol
	fi
fi

# GPG
if command_exists gpg; then
	echo -e "\\nGit Configuration: GPG"
	ok killall -c gpg-agent
	ok killall -c gpg
	if  test "$KRYPTON_GPG" != "no" && command_exists krgpg && (test "$KRYPTON_GPG" = "yes" || confirm 'Use Krypton for GPG?'); then
		git config --global gpg.program "$(which krgpg)"
		ok git config --global --unset user.signingkey
		USE_GPG="yes"
	else
		if test -z "$GPG_SIGNING_KEY"; then
			echo "Available GPG Keys:"
			key list private
			echo "GPG Key Selection:"
			GPG_SIGNING_KEY="$(key get private)"
		fi
		if test -n "$GPG_SIGNING_KEY"; then
			echo "Git Configuration: GPG: Key: $GPG_SIGNING_KEY"
			git config --global gpg.program "$(which gpg)"
			git config --global user.signingkey "$GPG_SIGNING_KEY"
			if is_mac; then
				echo "Git Configuration: GPG: Pinentry"
				agent_file="$HOME/.gnupg/gpg-agent.conf"
				touch "$agent_file"
				if ! command_exists pinentry-mac; then
					brew install pinentry-mac
				fi
				if grep 'pinentry-program' < "$agent_file"; then
					echo 'already configured'
				else
					echo "pinentry-program $(which pinentry-mac)" >> "$agent_file"
				fi
			fi
			USE_GPG="yes"
		else
			echo "Git Configuration: No GPG signing key found"
		fi
	fi
	if test "$USE_GPG" = "yes"; then
		git config --global tag.gpgsign true
		git config --global commit.gpgsign true
		# git config --global push.gpgsign true
		# ^ github doesnâ€™t support this with:
		# fatal: receiving end does not support --signed push
		# fatal: the receiving end does not support --signed push

		if silent grep "no-tty" "$HOME/.gnupg/gpg.conf"; then
			echo "no-tty" >> "$HOME/.gnupg/gpg.conf"
			# ^ http://github.com/isaacs/github/issues/675
		fi
		echo "Git Configuration: GPG: Enabled"
	else
		ok git config --global --unset tag.gpgsign
		ok git config --global --unset commit.gpgsign
		ok git config --global --unset user.signingkey
		echo "Git Configuration: GPG: Disabled"
	fi
fi

echo -e "\\nGit Configuration: Summary"
git config --global --list