#!/usr/bin/env bash
set -e
IFS=$'\n' # https://unix.stackexchange.com/q/9496/50703

# Guides
# https://www.gnupg.org/gph/en/manual.html
# https://riseup.net/en/security/message-security/openpgp/best-practices
# https://debian-administration.org/users/dkg/weblog/97
# https://davesteele.github.io/gpg/2014/09/20/anatomy-of-a-gpg-key/
# https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/
# http://curtiswallen.com/pgp/
# https://carouth.com/blog/2014/05/25/signing-pgp-keys/
# https://www.phildev.net/pgp/gpgsigning.html
# https://easyengine.io/tutorials/linux/gpg-keys/
# https://www.youtube.com/watch?v=ZSa-d_9O5DA

# Codes
# sec => 'SECret key'
# ssb => 'Secret SuBkey'
# pub => 'PUBlic key'
# sub => 'public SUBkey'

function getmode {
	if test -n "$1"; then
		echo "$1"
	else
		modes=$'public\nprivate'
		select mode in $modes; do
			test -n "$mode" && break
		done
		echo "$mode"
	fi
}
function getkey {
	if test -n "$1"; then
		echo "$1"
	else
		key get
	fi
}
function getdate {
	if test -n "$1"; then
		echo "$1"
	else
		date -v +1y "+%Y-%m-%d"
	fi
}

if test "$1" = "list"; then
	m="$(getmode "$2")"
	if test "$m" = "private"; then
		gpg --keyid-format LONG -K
	else
		gpg --keyid-format LONG -k
	fi

elif test "$1" = "get"; then
	if test -n "$3"; then
		echo "$3"
		exit 0
	fi
	m="$(getmode "$2")"
	if test "$m" = "private"; then
		flag="K"
		type="sec"
	else
		flag="k"
		type="pub"
	fi

	keys="$(gpg --fingerprint --keyid-format LONG -$flag | grep -A1 "$type" | grep "Key fingerprint =" | sed "s/.*=//; s/ *//g")"
	if test -z "$keys"; then
		echo 'no keys yet'
		exit 1
	fi

	count="$(echo "$keys" | wc -l | tr -d ' ')"
	if test "$count" = "1"; then
		echo "$keys"
	else
		select key in $keys; do
			test -n "$key" && break
		done
		echo "$key"
	fi

elif test "$1" = "export"; then
	m="$(getmode "$2")"
	k="$(key get "$m" "$3")"
	if test "$m" = "private"; then
		gpg --armor --export-secret-keys "$k"
	else
		gpg --armor --export "$k"
	fi

elif test "$1" = "delete"; then
	m="$(getmode "$2")"
	k="$(key get "$m" "$3")"
	if confirm "Confirm you wish to delete [$m] key [$k]?"; then
		if test "$m" = "private"; then
			gpg --delete-secret-keys "$k"
		else
			gpg --delete-keys "$k"
		fi
	fi

elif test "$1" = "new"; then
	gpg --gen-key

elif test "$1" = "edit"; then
	k="$(getkey "$2")"
	gpg --edit-key "$2"

elif test "$1" = "trust"; then
	k="$(key get private "$2")"
	if confirm "Confirm you wish to trust key [$k]?"; then
		echo "trust" | gpg --edit-key "$2"
	fi

elif test "$1" = "extend"; then
	k="$(key get private "$2")"
	d="$(getdate "$3")"
	if confirm "Confirm you wish to extend key [$k] to [$d]?"; then
		gpg --quick-set-expire "$k" "$d"
	fi

elif test "$1" = "expire"; then
	k="$(key get private "$2")"
	d="$(date -v +0d "+%Y-%m-%d")"
	if confirm "Confirm you want to expire key [$k]?"; then
		gpg --quick-set-expire "$k" "$d"
	fi

elif test "$1" = "encrypt"; then
	FILE="$2"
	THEM="$3"
	YOU="$4"
	if test -n "$YOU"; then
		gpg -ase -r "$THEM" -u "$YOU" "$FILE"
	else
		gpg -ase -r "$THEM" "$FILE"
	fi

elif test "$1" = "decrypt"; then
	# 2: file
	gpg -d "$2"

elif test "$1" = "sencrypt"; then
	# 2: file
	gpg -c "$2"

else
	echo "key <list|get> <public|private>"
	echo "key <export|delete> <public|private> <\$key>"
	echo "key <extend> <\$key> [\$date]"
	echo "key <edit|trust|expire> <\$key>"
	echo "key <encrypt> <\$file> <\$recipient> [\$key]"
	echo "key <decrypt|sencrypt> <\$file>"
fi